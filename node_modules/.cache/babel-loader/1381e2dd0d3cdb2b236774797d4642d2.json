{"ast":null,"code":"var _jsxFileName = \"/home/julianallende/Desktop/Coding/challenges/modyo_challenge/src/screens/SinglePokemonScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SinglePokemonScreen = props => {\n  _s();\n\n  console.log('GUACAMOLE');\n  const [loading, setLoading] = useState(true);\n  const [pokemonData, setPokemonData] = useState();\n  const pokemonId = props.id;\n\n  const fetchPokemonDetails = async () => {\n    const url = `https://pokeapi.co/api/v2/pokemon/${pokemonId}/`;\n    const response = await fetch(url);\n    const data = await response.json();\n    console.log(data);\n    setPokemonData(data);\n    setLoading(false);\n  };\n\n  useEffect(async () => {\n    fetchPokemonDetails();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"...Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 24\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pokemon-details-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: `${pokemonData.sprites.other.dream_world.front_default}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"pokemon-details-name\",\n        children: [\"Name: \", pokemonData.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"pokemon-details-name\",\n        children: [\"Abilities: \", pokemonData.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"pokemon-details-name\",\n        children: [\"Weight: \", pokemonData.weight]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pokemon-details-abilities\",\n        children: pokemonData.abilities.map((data, i) => {\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Ability \", i + 1, \": \", data.ability.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 36\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pokemon-details-types\",\n        children: pokemonData.types.map((data, i) => {\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Type \", i + 1, \": \", data.type.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 36\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SinglePokemonScreen, \"FAhB8ZyklcejcZJcnsLMCHC4d7k=\");\n\n_c = SinglePokemonScreen;\nexport default SinglePokemonScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"SinglePokemonScreen\");","map":{"version":3,"sources":["/home/julianallende/Desktop/Coding/challenges/modyo_challenge/src/screens/SinglePokemonScreen.js"],"names":["React","useState","useEffect","SinglePokemonScreen","props","console","log","loading","setLoading","pokemonData","setPokemonData","pokemonId","id","fetchPokemonDetails","url","response","fetch","data","json","sprites","other","dream_world","front_default","name","weight","abilities","map","i","ability","types","type"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAGA,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AACnCC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,EAA9C;AAEA,QAAMU,SAAS,GAAGP,KAAK,CAACQ,EAAxB;;AAEA,QAAMC,mBAAmB,GAAG,YAAY;AACpC,UAAMC,GAAG,GAAI,qCAAoCH,SAAU,GAA3D;AACA,UAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AACA,UAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAb,IAAAA,OAAO,CAACC,GAAR,CAAYW,IAAZ;AACAP,IAAAA,cAAc,CAACO,IAAD,CAAd;AACAT,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAPD;;AASAN,EAAAA,SAAS,CAAE,YAAW;AAClBW,IAAAA,mBAAmB;AACtB,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACI;AAAA,cACKN,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH,gBACJ;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA,8BACI;AAAK,QAAA,GAAG,EAAG,GAAEE,WAAW,CAACU,OAAZ,CAAoBC,KAApB,CAA0BC,WAA1B,CAAsCC,aAAc;AAAjE;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAG,QAAA,SAAS,EAAC,sBAAb;AAAA,6BAA2Cb,WAAW,CAACc,IAAvD;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAG,QAAA,SAAS,EAAC,sBAAb;AAAA,kCAAgDd,WAAW,CAACc,IAA5D;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAG,QAAA,SAAS,EAAC,sBAAb;AAAA,+BAA6Cd,WAAW,CAACe,MAAzD;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAK,QAAA,SAAS,EAAC,2BAAf;AAAA,kBACSf,WAAW,CAACgB,SAAZ,CAAsBC,GAAtB,CAA0B,CAACT,IAAD,EAAOU,CAAP,KAAa;AACxC,8BAAO;AAAA,mCAAYA,CAAC,GAAG,CAAhB,QAAqBV,IAAI,CAACW,OAAL,CAAaL,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACC,SAFA;AADT;AAAA;AAAA;AAAA;AAAA,cALJ,eAWI;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA,kBACSd,WAAW,CAACoB,KAAZ,CAAkBH,GAAlB,CAAsB,CAACT,IAAD,EAAOU,CAAP,KAAa;AACpC,8BAAO;AAAA,gCAASA,CAAC,GAAG,CAAb,QAAkBV,IAAI,CAACa,IAAL,CAAUP,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACC,SAFA;AADT;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFR;AAAA;AAAA;AAAA;AAAA,UADJ;AA+BH,CAnDD;;GAAMpB,mB;;KAAAA,mB;AAqDN,eAAeA,mBAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\n\n\nconst SinglePokemonScreen = (props) => {\n    console.log('GUACAMOLE')\n    const [loading, setLoading] = useState(true)\n    const [pokemonData, setPokemonData] = useState()\n\n    const pokemonId = props.id \n\n    const fetchPokemonDetails = async () => {\n        const url = `https://pokeapi.co/api/v2/pokemon/${pokemonId}/`\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data)\n        setPokemonData(data)\n        setLoading(false)\n    }\n\n    useEffect( async() => {\n        fetchPokemonDetails()\n    }, [])\n\n    return (\n        <div>\n            {loading ? <div>...Loading</div> : (\n                <div className=\"pokemon-details-wrapper\">\n                    <img src={`${pokemonData.sprites.other.dream_world.front_default}`}></img>\n                    <p className=\"pokemon-details-name\">Name: {pokemonData.name}</p>\n                    <p className=\"pokemon-details-name\">Abilities: {pokemonData.name}</p>\n                    <p className=\"pokemon-details-name\">Weight: {pokemonData.weight}</p>\n                    <div className=\"pokemon-details-abilities\">\n                            {pokemonData.abilities.map((data, i) => {\n                            return <p>Ability {i + 1}: {data.ability.name}</p>\n                            })\n                        }\n                    </div>\n                    <div className=\"pokemon-details-types\">\n                            {pokemonData.types.map((data, i) => {\n                            return <p>Type {i + 1}: {data.type.name}</p>\n                            })\n                        }\n                    </div>\n                    {/* <div className=\"pokemon-details-types\">\n                            {pokemonData.moves.map((data, i) => {\n                            return <p>Moves {i + 1}: {data.move.name}</p>\n                            })\n                        }\n                    </div> */}\n                    \n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default SinglePokemonScreen\n"]},"metadata":{},"sourceType":"module"}